"use strict";(self.webpackChunkmy_docs=self.webpackChunkmy_docs||[]).push([[6749],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=c(n),m=a,g=d["".concat(l,".").concat(m)]||d[m]||u[m]||o;return n?r.createElement(g,s(s({ref:t},p),{},{components:n})):r.createElement(g,s({ref:t},p))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[d]="string"==typeof e?e:a,s[1]=i;for(var c=2;c<o;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9926:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const o={},s="BudgetScreen",i={unversionedId:"Components/Screens/BudgetScreen/BudgetScreen",id:"Components/Screens/BudgetScreen/BudgetScreen",title:"BudgetScreen",description:"La finalidad de esta BudgetScreen es mostrar informaci\xf3n/m\xe9tricas financieras y estad\xedsticas relacionadas con el presupuesto y rendimiento de propiedades hoteleras. El c\xf3digo se encarga de obtener datos del backend, procesarlos y mostrarlos de manera visualmente atractiva en la interfaz de usuario a trav\xe9s de gr\xe1ficos, mapas y tablas (importados y renderizados por los compoenntes BudgetCards.tsx, CountryDataTable.tsx y WorldMap.tsx  ).",source:"@site/docs/Components/Screens/BudgetScreen/BudgetScreen.mdx",sourceDirName:"Components/Screens/BudgetScreen",slug:"/Components/Screens/BudgetScreen/",permalink:"/documentacion-frontend-budget/docs/Components/Screens/BudgetScreen/",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"TopBar",permalink:"/documentacion-frontend-budget/docs/Components/Navigation/TopBar"},next:{title:"BudgetCards",permalink:"/documentacion-frontend-budget/docs/Components/Screens/BudgetScreen/BudgetCards"}},l={},c=[{value:"Definici\xf3n de tipos de datos",id:"definici\xf3n-de-tipos-de-datos",level:2},{value:"Funciones auxiliares",id:"funciones-auxiliares",level:2},{value:"L\xf3gica y componentes principales",id:"l\xf3gica-y-componentes-principales",level:2}],p={toc:c},d="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"budgetscreen"},"BudgetScreen"),(0,a.kt)("p",null,"La finalidad de esta ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"BudgetScreen"))," es mostrar informaci\xf3n/m\xe9tricas financieras y estad\xedsticas relacionadas con el presupuesto y rendimiento de propiedades hoteleras. El c\xf3digo se encarga de obtener datos del backend, procesarlos y mostrarlos de manera visualmente atractiva en la interfaz de usuario a trav\xe9s de gr\xe1ficos, mapas y tablas (importados y renderizados por los compoenntes ",(0,a.kt)("inlineCode",{parentName:"p"},"BudgetCards.tsx"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"CountryDataTable.tsx")," y ",(0,a.kt)("inlineCode",{parentName:"p"},"WorldMap.tsx"),"  )."),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Para editar cualquier estilo del componente ",(0,a.kt)("strong",{parentName:"p"},"BudgetScreen"),", debe realizarse desde el archivo de estilos ",(0,a.kt)("strong",{parentName:"p"},"BudgetScreen.scss"),".")),(0,a.kt)("h2",{id:"definici\xf3n-de-tipos-de-datos"},"Definici\xf3n de tipos de datos"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Se define el tipo ",(0,a.kt)("inlineCode",{parentName:"li"},"Props")," para las propiedades del componente ",(0,a.kt)("inlineCode",{parentName:"li"},"BudgetScreen"),".")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="/components/screens/BudgetScreen/BudgetScreen.tsx"',title:'"/components/screens/BudgetScreen/BudgetScreen.tsx"'},"type Props = {\n    open?: boolean\n    userInfo?: UserInfo\n}\n\n// UserInfo es un type declarado en el archivo types.d.ts el cual se conecta a los endpoits del backend que traen informaci\xf3n propia del usuario.\n// este type cuenta con datos del usuario como: nombre, email, propiedades (nombre, id y tipolog\xeda)\ntype UserInfo = {\n    name: string\n    lastname: string\n    email: string\n    firebaseID: string\n    properties: Property[]\n    photoURL?: string\n}\ntype Property = {\n    propertyID: string\n    name: string\n    typologies: Typology[]\n}\ntype Typology = {\n    visualName: string // Dormitorios, Apartamentos, Privadas\n    alias: string // dorm, apart, room, global\n}\n\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Se definen varios types adicionales, (como ",(0,a.kt)("inlineCode",{parentName:"li"},"BudgetData")," o ",(0,a.kt)("inlineCode",{parentName:"li"},"BudgetMetrics"),"), utilizados en distintas partes del c\xf3digo para el manejo de datos.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="/components/screens/BudgetScreen/BudgetScreen.tsx"',title:'"/components/screens/BudgetScreen/BudgetScreen.tsx"'},"// BudgetData y BudgetMetrics son types declarados en el archivo types.d.ts el cual se conecta a los endpoits del backend que traen informaci\xf3n propia del usuario.\n// este type cuenta con datos del usuario como: ID de la propiedad, analisis, m\xe9tricas, etc\n\ntype BudgetData = {\n    propertyID:string\n    name: string\n    lastAnalysis: OrderAnalysis[]\n    lastTotalAnalysis: CountryAnalysis\n}\n\ntype BudgetMetrics = {\n    adr: MetricsInfo\n    occupancy: MetricsInfo\n    revenue: MetricsInfo\n    revPar: MetricsInfo\n}\n\n")),(0,a.kt)("h2",{id:"funciones-auxiliares"},"Funciones auxiliares"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"La funci\xf3n ",(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"ParserCountryTable"))," se encarga de procesar los datos del presupuesto y retornar una tabla con la informaci\xf3n de ingresos por pa\xeds."),(0,a.kt)("li",{parentName:"ul"},"La funci\xf3n ",(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"convertRevenueTableAlpha3"))," convierte los c\xf3digos de pa\xeds en formato Alpha-2 a Alpha-3 para su posterior procesamiento y visualizaci\xf3n en las tablas y en el mapa mundial.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="/components/screens/BudgetScreen/BudgetScreen.tsx"',title:'"/components/screens/BudgetScreen/BudgetScreen.tsx"'},"function ParserCountryTable(metric: string, budgetData?: BudgetData) {\n    const RevenueTableMetric = budgetData?.lastAnalysis.find(ob => ob.orderBy === metric)\n    if (!RevenueTableMetric) return countryRevenue\n    \n    return RevenueTableMetric.analysis.map((ca)=> {\n        return {\n            country: ca.country,\n            value: ca.analysis.metrics[RevenueTableMetric.orderBy].now\n        }\n    })\n}\n\nconst convertRevenueTableAlpha3 =(metric: string, budgetData?: BudgetData) =>  ParserCountryTable(metric, budgetData)?.map((item) => {\n    return {\n        country: alpha2ToAlpha3.whereAlpha2(item.country)?.alpha3 || item.country , \n        value: item.value\n    }\n})\n\nconst getSelectedDataForWorldMapDataType = (): { country: Alpha2Code; value: number }[] => {\n    if (worldMapDataType === 'Revenue') {\n        return convertRevenueTableAlpha3('revenue', budgetData) || []\n    }\n\n    if (worldMapDataType === 'Occupancy') {\n        return convertRevenueTableAlpha3('occupancy', budgetData) || []\n    }\n\n    return []\n}\n\nconst ocuppancyToWorldMapData = getSelectedDataForWorldMapDataType()\n\n")),(0,a.kt)("h2",{id:"l\xf3gica-y-componentes-principales"},"L\xf3gica y componentes principales"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Se utiliza el hook ",(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"useContext"))," para acceder al contexto global de la aplicaci\xf3n. En este caso, se utiliza para acceder al contexto de usuario y obtener la informaci\xf3n necesaria proveniente del backend.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="/components/screens/BudgetScreen/BudgetScreen.tsx"',title:'"/components/screens/BudgetScreen/BudgetScreen.tsx"'},"const { backendServices, loading } = useContext(UserContext)\n\n")),(0,a.kt)("ol",{start:2},(0,a.kt)("li",{parentName:"ol"},"Se definen varios estados utilizando el hook ",(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"useState"))," para almacenar y actualizar datos en el componente (para los datos de BudgetData, filtros, checkboxes para manejar los gr\xe1ficos, etc.).")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="/components/screens/BudgetScreen/BudgetScreen.tsx"',title:'"/components/screens/BudgetScreen/BudgetScreen.tsx"'},"const [worldMapDataType, setWorldMapDataType] = useState<ChartTitle>('Revenue')\nconst [budgetData, setBudgetData] = useState<BudgetData | undefined>(undefined)\nconst [actualFilters, setActualFilters] = useState<{ propertyName: string; formOfSale: 'dorm' | 'room' | 'global' | 'apart'; period: string }>({\n    propertyName: '',\n    formOfSale: 'global',\n    period: format(new Date(), 'yyyy-MM'),\n})\nconst [checkboxFilters, setCheckboxFilters] = useState<Record<ChartPeriod, boolean>>({\n    Budget: true,\n    Now: true,\n    ToGo: true,\n    LastYear: true,\n})\n\n")),(0,a.kt)("ol",{start:3},(0,a.kt)("li",{parentName:"ol"},"Se utiliza el hook ",(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"useEffect"))," para realizar efectos secundarios en el componente, como:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Llamar a la ",(0,a.kt)("strong",{parentName:"li"},"API del backend")," para obtener los datos del presupuesto"),(0,a.kt)("li",{parentName:"ul"},"Actualizar el estado de ",(0,a.kt)("strong",{parentName:"li"},"checkboxFilters")," cuando cambia ",(0,a.kt)("strong",{parentName:"li"},"lastAnalysisMetrics"),"."),(0,a.kt)("li",{parentName:"ul"},"Obtener los datos del presupuesto cuando cambian las propiedades del usuario."),(0,a.kt)("li",{parentName:"ul"},"Enviar el c\xf3digo de autorizaci\xf3n a trav\xe9s de ",(0,a.kt)("strong",{parentName:"li"},"backendServices")," cuando el componente se monta.")))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="/components/screens/BudgetScreen/BudgetScreen.tsx"',title:'"/components/screens/BudgetScreen/BudgetScreen.tsx"'},"useEffect(() => {\n    setCheckboxFilters({\n        Budget: true,\n        Now: true,\n        ToGo: true,\n        LastYear: true,\n    })\n}, [lastAnalysisMetrics])\n\nconst getPropertyIdFromName = (propertyName: string) => {\n    return userInfo?.properties.find((p) => p.name === propertyName)?.propertyID || ''\n}\n\nuseEffect(() => {\n    if (!properties || !properties.length || !backendServices) return\n    const initialFilter = { propertyName: properties[0].name, formOfSale: 'global' as const, period: format(new Date(), 'yyyy-MM') }\n    setActualFilters(initialFilter)\n    backendServices\n        .getBudgetScreen({ propertyID: getPropertyIdFromName(properties[0].name), period: initialFilter.period, formOfSale: initialFilter.formOfSale, orderBy: 'revenue,occupancy'  })\n        .then((resultBudget) => {\n            setBudgetData(resultBudget?.data)\n        })\n}, [userInfo])\n\nconst onFilterChange = (filters: { propertyName: string; formOfSale: 'dorm' | 'room' | 'global' | 'apart'; period: string }) => {\n    setActualFilters(filters)\n}\n\n\nconst onFiltersApply = () => {\n    if (!backendServices) return\n    const { propertyName, period, formOfSale } = actualFilters\n    const propertyID = getPropertyIdFromName(propertyName)\n    backendServices?.getBudgetScreen({ propertyID, period, formOfSale, orderBy: 'revenue,occupancy'}).then((resultBudget) => {\n        setBudgetData(resultBudget?.data)\n    })\n}\n\nconst urlAuthCode = new URLSearchParams(window.location.search);\nconst code = urlAuthCode.get('code');\n\nuseEffect(() => {\n    backendServices?.sendCloudBedsCodeBackend(code)\n}, [])\n\n")),(0,a.kt)("ol",{start:4},(0,a.kt)("li",{parentName:"ol"},"Se utiliza ",(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"useIntl"))," para acceder a la funci\xf3n ",(0,a.kt)("strong",{parentName:"li"},"formatMessage")," que proporciona traducciones de mensajes en el componente.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="/components/screens/BudgetScreen/BudgetScreen.tsx"',title:'"/components/screens/BudgetScreen/BudgetScreen.tsx"'},"import { useIntl } from 'react-intl'\n\nconst { formatMessage } = useIntl()\n\n")),(0,a.kt)("ol",{start:5},(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"useIsDesktop"))," y ",(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"useIsMobile"))," son funciones personalizadas (custom hooks) que se utilizan para determinar si el dispositivo en el que se est\xe1 ejecutando la aplicaci\xf3n es de escritorio o m\xf3vil.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="/components/screens/BudgetScreen/BudgetScreen.tsx"',title:'"/components/screens/BudgetScreen/BudgetScreen.tsx"'},"import { useIsDesktop, useIsMobile } from '../../../utils/hooks'\n\nconst isDesktop = useIsDesktop()\nconst isMobile = useIsMobile()\n\n// EJEMPLO\n <div>\n    {isMobile && (\n        <div>\n            <FilterBreadcrumb />\n        </div>\n    )} \n    {isDesktop && (\n        <div>\n            {periodTypes.map((type) => (\n                <FormControlLabel/>\n            ))}\n        </div>\n    )}\n</div>\n\n")))}u.isMDXComponent=!0}}]);