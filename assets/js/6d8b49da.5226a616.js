"use strict";(self.webpackChunkmy_docs=self.webpackChunkmy_docs||[]).push([[2853],{3905:(e,a,r)=>{r.d(a,{Zo:()=>d,kt:()=>g});var t=r(7294);function o(e,a,r){return a in e?Object.defineProperty(e,a,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[a]=r,e}function n(e,a){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),r.push.apply(r,t)}return r}function s(e){for(var a=1;a<arguments.length;a++){var r=null!=arguments[a]?arguments[a]:{};a%2?n(Object(r),!0).forEach((function(a){o(e,a,r[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(r,a))}))}return e}function p(e,a){if(null==e)return{};var r,t,o=function(e,a){if(null==e)return{};var r,t,o={},n=Object.keys(e);for(t=0;t<n.length;t++)r=n[t],a.indexOf(r)>=0||(o[r]=e[r]);return o}(e,a);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(t=0;t<n.length;t++)r=n[t],a.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=t.createContext({}),i=function(e){var a=t.useContext(l),r=a;return e&&(r="function"==typeof e?e(a):s(s({},a),e)),r},d=function(e){var a=i(e.components);return t.createElement(l.Provider,{value:a},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},m=t.forwardRef((function(e,a){var r=e.components,o=e.mdxType,n=e.originalType,l=e.parentName,d=p(e,["components","mdxType","originalType","parentName"]),c=i(r),m=o,g=c["".concat(l,".").concat(m)]||c[m]||u[m]||n;return r?t.createElement(g,s(s({ref:a},d),{},{components:r})):t.createElement(g,s({ref:a},d))}));function g(e,a){var r=arguments,o=a&&a.mdxType;if("string"==typeof e||o){var n=r.length,s=new Array(n);s[0]=m;var p={};for(var l in a)hasOwnProperty.call(a,l)&&(p[l]=a[l]);p.originalType=e,p[c]="string"==typeof e?e:o,s[1]=p;for(var i=2;i<n;i++)s[i]=r[i];return t.createElement.apply(null,s)}return t.createElement.apply(null,r)}m.displayName="MDXCreateElement"},101:(e,a,r)=>{r.r(a),r.d(a,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>n,metadata:()=>p,toc:()=>i});var t=r(7462),o=(r(7294),r(3905));const n={},s="BudgetCards",p={unversionedId:"Components/Screens/BudgetScreen/BudgetCards",id:"Components/Screens/BudgetScreen/BudgetCards",title:"BudgetCards",description:'El componente BudgetCards es responsable de generar gr\xe1ficos de barras para diferentes tipos de presupuesto utilizando los datos y los filtros proporcionados por el componente ``. Los tipos de presupuesto incluyen "Revenue" (Ingresos), "RevPAR" (Ingresos por habitaci\xf3n disponible), "ADR" (Tarifa promedio diaria) y "Occupancy" (Ocupaci\xf3n). Cada gr\xe1fico de barras se muestra en un componente RoiBarChart. Esta abstracci\xf3n permite mostrar visualmente los presupuestos de manera clara y estructurada.',source:"@site/docs/Components/Screens/BudgetScreen/BudgetCards.mdx",sourceDirName:"Components/Screens/BudgetScreen",slug:"/Components/Screens/BudgetScreen/BudgetCards",permalink:"/documentacion-frontend-budget/docs/Components/Screens/BudgetScreen/BudgetCards",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Components/Screens/BudgetScreen/BudgetCards.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"BudgetScreen",permalink:"/documentacion-frontend-budget/docs/Components/Screens/BudgetScreen/"},next:{title:"CountryDataTable",permalink:"/documentacion-frontend-budget/docs/Components/Screens/BudgetScreen/CountryDataTable"}},l={},i=[{value:"Interfaz y colores",id:"interfaz-y-colores",level:2},{value:"getBarDataChart",id:"getbardatachart",level:2}],d={toc:i},c="wrapper";function u(e){let{components:a,...r}=e;return(0,o.kt)(c,(0,t.Z)({},d,r,{components:a,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"budgetcards"},"BudgetCards"),(0,o.kt)("p",null,"El componente ",(0,o.kt)("strong",{parentName:"p"},"BudgetCards")," es responsable de generar gr\xe1ficos de barras para diferentes tipos de presupuesto utilizando los datos y los filtros proporcionados por el componente ",(0,o.kt)("inlineCode",{parentName:"p"},"<RoiBarChart>"),". Los tipos de presupuesto incluyen ",(0,o.kt)("strong",{parentName:"p"},'"Revenue" (Ingresos), "RevPAR" (Ingresos por habitaci\xf3n disponible), "ADR" (Tarifa promedio diaria) y "Occupancy" (Ocupaci\xf3n)'),". Cada gr\xe1fico de barras se muestra en un componente RoiBarChart. Esta abstracci\xf3n permite mostrar visualmente los presupuestos de manera clara y estructurada."),(0,o.kt)("admonition",{title:"Importante",type:"caution"},(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("strong",{parentName:"p"},"BudgetCards")," recibe los graficos del componente ",(0,o.kt)("inlineCode",{parentName:"p"},"RoiBarChart")," (el cual se encarga de renderizar los gr\xe1ficos y sus respectivas opciones).")),(0,o.kt)("h2",{id:"interfaz-y-colores"},"Interfaz y colores"),(0,o.kt)("p",null,"En primera instancia se define una interfaz llamada ",(0,o.kt)("strong",{parentName:"p"},"OwnProps")," que representa las propiedades esperadas para el componente ",(0,o.kt)("strong",{parentName:"p"},"BudgetCards"),". Esta interfaz incluye dos propiedades:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"data:")," Es un objeto que utiliza el tipo Record para definir las propiedades del objeto y sus respectivos valores. En este caso, las claves del objeto son del tipo ChartTitle y los valores son objetos que contienen propiedades espec\xedficas para cada tipo de gr\xe1fico. Estas propiedades incluyen Budget (Presupuesto), Now (Actual), ToGo (Faltante) y LastYear (A\xf1o anterior), todos ellos con un tipo de dato number.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"checkboxFilters:")," Tambi\xe9n es un objeto definido con el tipo Record. Las claves de este objeto son del tipo ChartPeriod y los valores son del tipo boolean. Este objeto representa los filtros de casillas de verificaci\xf3n para los per\xedodos del gr\xe1fico."))),(0,o.kt)("p",null,"Adem\xe1s, se define el objeto ",(0,o.kt)("strong",{parentName:"p"},"barColors"),", que contiene los colores utilizados en los gr\xe1ficos de barras para cada tipo de ",(0,o.kt)("strong",{parentName:"p"},"data"),". Contienen las propiedades barColorsBack y barColor que definen los colores de fondo y de la barra para el tipo de presupuesto respectivo."),(0,o.kt)("h2",{id:"getbardatachart"},"getBarDataChart"),(0,o.kt)("p",null,"La funci\xf3n ",(0,o.kt)("inlineCode",{parentName:"p"},"getBarDataChart")," es una funci\xf3n que recibe un argumento type de tipo ",(0,o.kt)("strong",{parentName:"p"},"ChartTitle")," y devuelve un objeto que contiene los datos necesarios para generar un gr\xe1fico de barras."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Se declara una variable ",(0,o.kt)("strong",{parentName:"p"},"periods")," que es un array de tipo ",(0,o.kt)("strong",{parentName:"p"},"ChartPeriod"),". Utiliza ",(0,o.kt)("strong",{parentName:"p"},"Object.keys")," para obtener las claves del objeto ",(0,o.kt)("strong",{parentName:"p"},"data","[type]")," y luego las asigna a ",(0,o.kt)("strong",{parentName:"p"},"periods")," utilizando ",(0,o.kt)("strong",{parentName:"p"},"as ChartPeriod[]")," para indicar que los valores del array son de tipo ",(0,o.kt)("strong",{parentName:"p"},"ChartPeriod"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Se declara una variable ",(0,o.kt)("strong",{parentName:"p"},"values")," que es un array de n\xfameros. Utiliza el m\xe9todo ",(0,o.kt)("strong",{parentName:"p"},"map")," para recorrer los elementos de ",(0,o.kt)("strong",{parentName:"p"},"periods")," y acceder a los valores correspondientes en ",(0,o.kt)("strong",{parentName:"p"},"data","[type]"),". Si el valor es ",(0,o.kt)("strong",{parentName:"p"},"undefined"),", se asigna ",(0,o.kt)("strong",{parentName:"p"},"0")," como valor predeterminado. Los valores resultantes se almacenan en ",(0,o.kt)("strong",{parentName:"p"},"values"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Se calcula el valor m\xe1ximo de ",(0,o.kt)("strong",{parentName:"p"},"values")," utilizando ",(0,o.kt)("strong",{parentName:"p"},"Math.max(...values)")," y se asigna a la variable ",(0,o.kt)("strong",{parentName:"p"},"maxValue"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Se declara una variable ",(0,o.kt)("strong",{parentName:"p"},"filterValues")," que es un array de n\xfameros. Utiliza el m\xe9todo ",(0,o.kt)("strong",{parentName:"p"},"map")," para recorrer los elementos de ",(0,o.kt)("strong",{parentName:"p"},"periods")," y acceder a los valores correspondientes en ",(0,o.kt)("strong",{parentName:"p"},"data","[type]"),". Si el valor de ",(0,o.kt)("strong",{parentName:"p"},"checkboxFilters[key"),"] es ",(0,o.kt)("strong",{parentName:"p"},"true"),", se usa el valor en ",(0,o.kt)("strong",{parentName:"p"},"data","[type][key]"),", de lo contrario, se asigna ",(0,o.kt)("strong",{parentName:"p"},"0"),". Los valores resultantes se almacenan en ",(0,o.kt)("strong",{parentName:"p"},"filterValues"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Se declara una variable ",(0,o.kt)("strong",{parentName:"p"},"realValueColorArray")," que es un array de strings. Utiliza el m\xe9todo ",(0,o.kt)("strong",{parentName:"p"},"map")," para recorrer los elementos de ",(0,o.kt)("strong",{parentName:"p"},"periods")," y acceder a los colores de la propiedad ",(0,o.kt)("strong",{parentName:"p"},"barColor")," en el objeto ",(0,o.kt)("strong",{parentName:"p"},"barColors"),". La correspondencia se realiza utilizando ",(0,o.kt)("strong",{parentName:"p"},"period")," como clave en ",(0,o.kt)("strong",{parentName:"p"},"barColors"),". Los colores resultantes se almacenan en ",(0,o.kt)("strong",{parentName:"p"},"realValueColorArray"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Se declara una variable ",(0,o.kt)("strong",{parentName:"p"},"overlapBarColorArray")," que es un array de strings. Utiliza el m\xe9todo ",(0,o.kt)("strong",{parentName:"p"},"map")," para recorrer los elementos de ",(0,o.kt)("strong",{parentName:"p"},"periods")," y acceder a los colores de la propiedad ",(0,o.kt)("strong",{parentName:"p"},"barColorsBack")," en el objeto ",(0,o.kt)("strong",{parentName:"p"},"barColors"),". La correspondencia se realiza utilizando ",(0,o.kt)("strong",{parentName:"p"},"period")," como clave en ",(0,o.kt)("strong",{parentName:"p"},"barColors"),". Los colores resultantes se almacenan en ",(0,o.kt)("strong",{parentName:"p"},"overlapBarColorArray"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Finalmente, se devuelve un objeto que contiene las propiedades necesarias para generar el gr\xe1fico de barras. Las propiedades incluyen ",(0,o.kt)("strong",{parentName:"p"},"labels")," que se obtiene mediante el m\xe9todo ",(0,o.kt)("strong",{parentName:"p"},"map")," para convertir los valores de ",(0,o.kt)("strong",{parentName:"p"},"periods")," en etiquetas utilizando la funci\xf3n ",(0,o.kt)("strong",{parentName:"p"},"formatMessage")," con mensajes espec\xedficos de presupuesto, y ",(0,o.kt)("strong",{parentName:"p"},"datasets")," que es un array de objetos. Cada objeto dentro de ",(0,o.kt)("strong",{parentName:"p"},"datasets")," representa un conjunto de datos para una serie del gr\xe1fico de barras. Cada objeto tiene propiedades como ",(0,o.kt)("strong",{parentName:"p"},"label")," (etiqueta), ",(0,o.kt)("strong",{parentName:"p"},"data")," (valores), ",(0,o.kt)("strong",{parentName:"p"},"backgroundColor")," (color de fondo), ",(0,o.kt)("strong",{parentName:"p"},"borderColor")," (color del borde), ",(0,o.kt)("strong",{parentName:"p"},"barColor")," (color de la barra), ",(0,o.kt)("strong",{parentName:"p"},"borderWidth")," (ancho del borde) y ",(0,o.kt)("strong",{parentName:"p"},"borderRadius")," (radio de las esquinas). Los valores utilizados en estas propiedades se obtienen de las variables previamente definidas."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="/components/screens/BudgetScreen/BudgetCards.tsx"',title:'"/components/screens/BudgetScreen/BudgetCards.tsx"'},"const periods: Array<ChartPeriod> = Object.keys(data[type]) as ChartPeriod[]\nconst values: number[] = periods.map((key) => (data[type][key] || 0))\nconst maxValue = Math.max(...values)\nconst filterValues = periods.map((key) => (checkboxFilters[key] ? (data[type][key] || 0) : 0))\nconst realValueColorArray = periods.map((period) => barColors[period as keyof typeof barColors].barColor)\nconst overlapBarColorArray = periods.map((period) => barColors[period as keyof typeof barColors].barColorsBack)\n")))}u.isMDXComponent=!0}}]);